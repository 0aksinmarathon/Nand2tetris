// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   //zx

   Xor161(a=x, b=zx, out=outx1);
   And16(a=x, b=outx1, out=outx2);

   //nx
   Xor161(a=outx2, b=nx, out=outx3); // 16 :1

   //zy
   Xor161(a=y, b=zy, out=outy1); // 16 : 1
   And16(a=y, b=outy1, out=outy2); // 16:16

   //ny
   Xor161(a=outy2, b=ny, out=outy3); // 16:1

   //f
   Add16(a=outx3, b=outy3, out=xyadd); // 16:16
   And16(a=outx3, b=outy3, out=xyand); // 16:16

   Not(in=f, out=nf);

   Xor161(a=xyadd, b=nf, out=xyadd2);
   And16(a=xyadd, b=xyadd2, out=xyadd3);

   Xor161(a=xyand, b=f, out=xyand2);
   And16(a=xyand, b=xyand2, out=xyand3);

   Or16(a=xyadd3, b=xyand3, out=outxy);



   //no
   Xor161(a=outxy, b=no, out=nnout);

   Not16(in=nnout, out=nout);
   Not16(in=nout, out=out);

   Or16Way(in=nnout, out=nzr);
   Not(in=nzr, out=zr);
   Ps16(in=nnout, out=nng);
   Not(in=nng, out=ng);

   }
