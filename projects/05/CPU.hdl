// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=cinstruction);
    Not(in=cinstruction, out=ainstruction);

    And(a=instruction[0], b=ainstruction, out=instruction0);
    And(a=instruction[1], b=ainstruction, out=instruction1);
    And(a=instruction[2], b=ainstruction, out=instruction2);
    And(a=instruction[3], b=ainstruction, out=loadM);
    And(a=instruction[4], b=ainstruction, out=loadD);
    And(a=instruction[5], b=ainstruction, out=loada);
    And(a=instruction[6], b=ainstruction, out=instruction6);
    And(a=instruction[7], b=ainstruction, out=instruction7);
    And(a=instruction[8], b=ainstruction, out=instruction8);
    And(a=instruction[9], b=ainstruction, out=instruction9);
    Or(a=instruction[10], b=cinstruction, out=instruction10);
    Or(a=instruction[11], b=cinstruction, out=instruction11);
    And(a=instruction[12], b=ainstruction, out=instruction12);

    Mux16(a=instruction, b=aluout, sel=instruction[15], out=intoa);

    Or(a=loada, b=cinstruction, out=loadA);
    DRegister(in=aluout, load=loadD, out=d);
    ARegister(in=intoa, load=loadA, out=outa, out[0..14]=addressM);

    Mux16(a=outa, b=inM, sel=instruction12, out=intoalu);

    ALU(x=d, y=intoalu, zx=instruction11, nx=instruction10, zy=instruction9, ny=instruction8,
    f=instruction7, no=instruction6, out=aluout, out=outM, ng=neg, zr=zr);

    And(a=loadM, b=true, out=writeM);

    Or(a=neg, b=zr, out=npos);
    Not(in=npos, out=pos);
    And(a=instruction2, b=neg, out=ltjump);
    And(a=instruction1, b=zr, out=eqjump);
    And(a=instruction0, b=pos, out=gtjump);
    Or8Way(in[0]=ltjump, in[1]=eqjump, in[2]=gtjump, in[3..7]=false, out=jump);
    PC(in=outa, reset=reset, inc=true, load=jump, out[0..14]=pc);
}
